from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database import *
import os
import uuid
from dotenv import load_dotenv
import logging
logging.basicConfig(level=logging.INFO, filename="bot_debug.log", filemode="a", format="%(asctime)s - %(message)s")

load_dotenv()

editing_data = {}
product_data = {}
ADMIN_BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
app = Application.builder().token(ADMIN_BOT_TOKEN).build()

# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORIES = {
    1: "–ø–ª–∞—Ç—å—è",
    2: "–∫–æ—Å—Ç—é–º—ã",
    3: "–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
    4: "—Ñ—É—Ç–±–æ–ª–∫–∏",
}

# –°–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞
ATRIBUTES = {
    1: "name",
    2: "photos",
    3: "colors",
    4: "sizes",
    5: "price",
    6: "description",
    7: "quantity"
}



async def send_order_to_telegram(order_id):
    try:
        connection = get_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
        order = cursor.fetchone()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ: {e}")
        return

    if not order:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
    cursor.execute("""
        SELECT oi.*, p.photo_url 
        FROM order_items oi
        JOIN product_photos p ON oi.product_article = p.product_article
        WHERE oi.order_id = %s
    """, (order_id,))
    order_items = cursor.fetchall()

    bot = Bot(token=ADMIN_BOT_TOKEN)

    match order[7]:
        case '–ï–≤—Ä–æ–ø–æ—á—Ç–∞':
            order_text = (
                f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n"
                f"üè§ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order[7]}\n"  # –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
                f"üë§ {order[1]}\n"  # –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
                f"üåç –°—Ç—Ä–∞–Ω–∞: {order[2]}\n"  # –°—Ç—Ä–∞–Ω–∞
                f"üå≥ –û–±–ª–∞—Å—Ç—å: {order[4]}\n"  # –û–±–ª–∞—Å—Ç—å
                f"üèô –ì–æ—Ä–æ–¥: {order[3]}\n"  # –ì–æ—Ä–æ–¥
                f"üè† –ê–¥—Ä–µ—Å: {order[5]}\n"  # –£–ª–∏—Ü–∞
                f"üì¶ –ù–æ–º–µ—Ä –ü–í–ó: {order[8]}\n"  # –ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏
                f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order[9]}\n"  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                f"üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: {order[10]}\n"  # –ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order[11]} RUB\n"  # –û–±—â–∞—è —Å—É–º–º–∞
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order[12]}\n\n"  # –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
                f"–¢–æ–≤–∞—Ä—ã:\n"
            )
        case '–ë–µ–ª–ø–æ—á—Ç–∞':
            order_text = (
                f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n"
                f"üè§ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order[7]}\n"  # –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
                f"üë§ {order[1]}\n"  # –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
                f"üåç –°—Ç—Ä–∞–Ω–∞: {order[2]}\n"  # –°—Ç—Ä–∞–Ω–∞
                f"üå≥ –û–±–ª–∞—Å—Ç—å: {order[4]}\n"  # –û–±–ª–∞—Å—Ç—å
                f"üèô –ì–æ—Ä–æ–¥: {order[3]}\n"  # –ì–æ—Ä–æ–¥
                f"üè† –ê–¥—Ä–µ—Å: {order[5]}\n"  # –£–ª–∏—Ü–∞
                f"üìç –ò–Ω–¥–µ–∫—Å: {order[6]}\n"  # –ò–Ω–¥–µ–∫—Å
                f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order[9]}\n"  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                f"üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: {order[10]}\n"  # –ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order[11]} RUB\n"  # –û–±—â–∞—è —Å—É–º–º–∞
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order[12]}\n\n"  # –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
                f"–¢–æ–≤–∞—Ä—ã:\n"
            )
        case '–°–î–≠–ö':
            order_text = (
                f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n"
                f"üè§ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order[7]}\n"  # –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
                f"üë§ {order[1]}\n"  # –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
                f"üåç –°—Ç—Ä–∞–Ω–∞: {order[2]}\n"  # –°—Ç—Ä–∞–Ω–∞
                f"üå≥ –û–±–ª–∞—Å—Ç—å: {order[4]}\n"  # –û–±–ª–∞—Å—Ç—å
                f"üèô –ì–æ—Ä–æ–¥: {order[3]}\n"  # –ì–æ—Ä–æ–¥
                f"üè† –ê–¥—Ä–µ—Å: {order[5]}\n"  # –£–ª–∏—Ü–∞
                f"üì¶ –ù–æ–º–µ—Ä –ü–í–ó: {order[8]}\n"  # –ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏
                f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order[9]}\n"  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                f"üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: {order[10]}\n"  # –ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order[11]} RUB\n"  # –û–±—â–∞—è —Å—É–º–º–∞
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order[12]}\n\n"  # –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
                f"–¢–æ–≤–∞—Ä—ã:\n"
            )
        case '–ë–æ–∫—Å–±–µ—Ä—Ä–∏':
            order_text = (
                f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n"
                f"üè§ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order[7]}\n"  # –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
                f"üë§ {order[1]}\n"  # –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
                f"üåç –°—Ç—Ä–∞–Ω–∞: {order[2]}\n"  # –°—Ç—Ä–∞–Ω–∞
                f"üå≥ –û–±–ª–∞—Å—Ç—å: {order[4]}\n"  # –û–±–ª–∞—Å—Ç—å
                f"üèô –ì–æ—Ä–æ–¥: {order[3]}\n"  # –ì–æ—Ä–æ–¥
                f"üè† –ê–¥—Ä–µ—Å: {order[5]}\n"  # –£–ª–∏—Ü–∞
                f"üì¶ –ù–æ–º–µ—Ä –ü–í–ó: {order[8]}\n"  # –ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏
                f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order[9]}\n"  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                f"üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: {order[10]}\n"  # –ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order[11]} RUB\n"  # –û–±—â–∞—è —Å—É–º–º–∞
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order[12]}\n\n"  # –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
                f"–¢–æ–≤–∞—Ä—ã:\n"
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ–π –æ –∑–∞–∫–∞–∑–µ
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=order_text, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
    for item in order_items:
        product_name = item[2]
        color = item[3]
        size = item[4]
        quantity = item[5]
        price = item[6]
        photo_filename = item[7]

        if photo_filename:
            photo_url = f"https://pobegamiwebapp.ru/maryanashop_webapp/public_html/assets/uploads/{photo_filename}"
            caption = (
                f"üõí *{product_name}*\n"
                f"üé® –¶–≤–µ—Ç: {color}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
                f"üî¢ –ö–æ–ª-–≤–æ: {quantity}\n"
                f"üíµ –¶–µ–Ω–∞: {price} RUB"
            )
            await bot.send_photo(
                chat_id=TELEGRAM_CHAT_ID,
                photo=photo_url,
                caption=caption,
                parse_mode="Markdown"
            )
        else:
            # fallback –±–µ–∑ —Ñ–æ—Ç–æ
            text = (
                f"üõí *{product_name}*\n"
                f"üé® –¶–≤–µ—Ç: {color}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
                f"üî¢ –ö–æ–ª-–≤–æ: {quantity}\n"
                f"üíµ –¶–µ–Ω–∞: {price} RUB"
            )
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text, parse_mode="Markdown")

    print(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    user_id = update.message.from_user.id
    product_data[user_id] = {
        "article" : [],
        "name": None,
        "photos": [],
        "colors": [],
        "sizes": [],
        "price": [],
        "description": [],
        "quantity": [],
        "category": None,
        "step": "category",
    }
    category_options = "\n".join([f"{num}: {name}" for num, name in CATEGORIES.items()])
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä:\n{category_options}"
    )

async def product_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in product_data:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
        return

    status = product_data[user_id]
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:\n{json.dumps(status, indent=2, ensure_ascii=False)}")

def generate_article(category_prefix):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –ê—Ä—Ç–∏–∫—É–ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ {prefix}{–Ω–æ–º–µ—Ä}, –≥–¥–µ prefix - –ø—Ä–µ—Ñ–∏–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
    –∞ –Ω–æ–º–µ—Ä - —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    last_number = get_last_article_number(category_prefix)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if last_number is None:  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë –Ω–µ—Ç
        last_number = 0
    new_number = last_number + 1
    return f"{category_prefix}{new_number:04d}"

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.message.from_user.id
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç")
    if user_id not in product_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_product.")
        return

    current_step = product_data[user_id]["step"]

    if current_step == "category":
        try:
            category_prefix = int(update.message.text.strip())
            if category_prefix not in CATEGORIES:
                raise ValueError
            product_data[user_id]["category"] = category_prefix
            product_data[user_id]["article"] = generate_article(category_prefix)
            product_data[user_id]["step"] = "name"
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                + "\n".join([f"{num}: {name}" for num, name in CATEGORIES.items()])
            )
    elif current_step == "name":
        product_data[user_id]["name"] = update.message.text.strip()
        product_data[user_id]["step"] = "photos"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    elif current_step == "colors":
        product_data[user_id]["colors"].extend(update.message.text.split(","))
        await update.message.reply_text("–¶–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: S, M, L –∏–ª–∏ 42, 44, 46):")
        product_data[user_id]["step"] = "sizes"
    elif current_step == "sizes":
        product_data[user_id]["sizes"].extend(update.message.text.split(","))
        await update.message.reply_text("–†–∞–∑–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –≤ RUB.")
        product_data[user_id]["step"] = "prices"
    elif current_step == "prices":
        try:
            product_data[user_id]["price"] = update.message.text.strip()
            await update.message.reply_text("–¶–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            product_data[user_id]["step"] = "description"
        except (IndexError, ValueError):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ RUB. –ù–∞–ø—Ä–∏–º–µ—Ä: '1500'"
            )
    elif current_step == "description":
        product_data[user_id]["description"] = update.message.text.strip()
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        product_data[user_id]["step"] = "quantity"

        colors = product_data[user_id]["colors"]
        sizes = product_data[user_id]["sizes"]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ü–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        combinations = [f"{color} - {size}" for color in colors for size in sizes]

        product_data[user_id]["quantity_combinations"] = combinations  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        product_data[user_id]["step"] = "quantity_values"  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        message = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n" + "\n".join(combinations)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `context.bot.send_message`, –ø–µ—Ä–µ–¥–∞–≤ chat_id
        await context.bot.send_message(chat_id=update.message.chat_id, text=message)
    elif current_step == "quantity_values":
        try:
            values = list(map(int, update.message.text.split(",")))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
            combinations = product_data[user_id]["quantity_combinations"]

            if len(values) != len(combinations):
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ({len(combinations)}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return

            # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {"–ö—Ä–∞—Å–Ω—ã–π-M": 5, "–°–∏–Ω–∏–π-L": 2}
            quantity_dict = {comb: val for comb, val in zip(combinations, values)}
            product_data[user_id]["quantity"] = quantity_dict  # –•—Ä–∞–Ω–∏–º –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É

            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
            product_data[user_id]["step"] = "save"

        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 3, 7")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î
        product_info = product_data[user_id]
        article = product_data[user_id]["article"]
        sizes = ",".join(product_info["sizes"])
        colors = ",".join(product_info["colors"])
        name = product_info["name"]
        price = product_info["price"]
        description = product_info["description"]
        category_prefix = product_info["category"]
        quantity = product_info["quantity"]

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(product_data[user_id]["quantity"], str):
            try:
                quantity_dict = json.loads(product_data[user_id]["quantity"])
            except json.JSONDecodeError:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
                return
        else:
            quantity_dict = product_data[user_id]["quantity"]  # –ï—Å–ª–∏ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        # –¢–µ–ø–µ—Ä—å quantity_dict —Ç–æ—á–Ω–æ —Å–ª–æ–≤–∞—Ä—å, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .values()
        total_quantity = sum(quantity_dict.values())

        # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ü–≤–µ—Ç—É
        color_totals = {}
        for key, value in quantity_dict.items():
            color = key.split(" - ")[0]  # –î–æ—Å—Ç–∞—ë–º —Ü–≤–µ—Ç
            color_totals[color] = color_totals.get(color, 0) + value

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ —Ü–≤–µ—Ç–∞–º
        color_quantity_text = ", ".join([f"{color}: {qty}" for color, qty in color_totals.items()])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –ë–î
        save_product(article, name, description, price, sizes, colors, quantity, category_prefix)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        for photo in product_data[user_id]["photos"]:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
            file_name = os.path.basename(photo)
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO product_photos (product_article, photo_url) 
                VALUES (%s, %s)
            """, (product_data[user_id]["article"], file_name))
            conn.commit()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        result_message = (
            f"üéâ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üìã –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            f"üì∏ –§–æ—Ç–æ: {len(product_info['photos'])} —à—Ç.\n"
            f"üé® –¶–≤–µ—Ç–∞: {colors}\n"
            f"üìè –†–∞–∑–º–µ—Ä—ã: {sizes}\n"
            f"üíµ –¶–µ–Ω—ã: {price}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {color_quantity_text}\n"
        )
        await update.message.reply_text(result_message)

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        del product_data[user_id]
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—É /add_product.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    user_id = update.message.from_user.id
    upload_path = os.path.join(os.path.dirname(__file__), "../assets/uploads")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    if user_id not in product_data or product_data[user_id].get("step") != "photos":
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_product.")
        return

    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)

    unique_name = f"{uuid.uuid4().hex}.jpg"
    file_path = os.path.join(upload_path, unique_name)

    await file.download_to_drive(file_path)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(file_path):
            product_data.setdefault(user_id, {}).setdefault("photos", []).append(file_path)
            normalized_path = file_path.replace("\\", "/")  # –ü—Ä–∏–≤–æ–¥–∏–º –ø—É—Ç—å –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
            
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

async def handle_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–ì–æ—Ç–æ–≤–æ'."""
    user_id = update.message.from_user.id

    if user_id in product_data:
        # –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        current_step = product_data[user_id]["step"]
        if current_step == "photos":
            product_data[user_id]["step"] = "colors"
            await update.message.reply_text(
                "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π, –ß—ë—Ä–Ω—ã–π):")
        else:
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ '–ì–æ—Ç–æ–≤–æ' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.")

    elif user_id in editing_data:
        # –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        current_step = editing_data[user_id]["step"]

        if current_step == "photos":
            editing_data[user_id]["step"] = "colors"
            await update.message.reply_text(
                "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π, –ß—ë—Ä–Ω—ã–π):")
        elif current_step == "colors":
            editing_data[user_id]["step"] = "sizes"
            await update.message.reply_text("–¶–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: S, M, L):")
        elif current_step == "sizes":
            editing_data[user_id]["step"] = "prices"
            await update.message.reply_text(
                "–†–∞–∑–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –≤ RUB, BYN, KZT, KGS (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1600, 49, 4680, 1300):")
        elif current_step == "prices":
            editing_data[user_id]["step"] = "description"
            await update.message.reply_text("–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        elif current_step == "description":
            editing_data[user_id]["step"] = "quantity"
            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        elif current_step == "quantity":
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î
            product_info = editing_data[user_id]
            article = product_info["article"]
            sizes = ",".join(product_info["sizes"])
            colors = ",".join(product_info["colors"])
            name = product_info["name"]
            price = json.dumps(product_info["price"])
            description = product_info["description"]
            quantity = product_info["quantity"]

            update_product(article, name, description, price, sizes, colors, quantity)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                f"üìã –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
                f"üì∏ –§–æ—Ç–æ: {len(product_info['photos'])} —à—Ç.\n"
                f"üé® –¶–≤–µ—Ç–∞: {colors}\n"
                f"üìè –†–∞–∑–º–µ—Ä—ã: {sizes}\n"
                f"üíµ –¶–µ–Ω—ã: {price}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            )

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            del editing_data[user_id]
        else:
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ '–ì–æ—Ç–æ–≤–æ' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.")

    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n`/delete 10001`", parse_mode="Markdown")
        return

    article = args[0]
    product = get_product_by_article(article)
    if not product:
        await update.message.reply_text("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    delete_product(article)
    await update.message.reply_text(f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} —É–¥–∞–ª—ë–Ω.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in product_data:
        del product_data[user_id]
        await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")



def main():

    app.add_handler(CommandHandler("add_product", add_product))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("delete", delete))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ì–æ—Ç–æ–≤–æ"), handle_done))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()
